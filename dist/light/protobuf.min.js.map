{"version":3,"sources":["lib/prelude.js","../node_modules/@aelfqueen/inquire/index.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/base64-js/index.js","../node_modules/buffer/index.js","../node_modules/ieee754/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","moduleName","mod","length","Object","keys","err","fn","ctx","params","Array","arguments","offset","index","pending","Promise","resolve","reject","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","body","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","asPromise","fs","inquire","filename","options","callback","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","byteLength","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","curByte","revLookup","fromByteArray","uint8","extraBytes","len2","encodeChunk","lookup","code","indexOf","num","output","ieee754","Buffer","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","from","TypeError","isArrayBuffer","array","byteOffset","fromArrayBuffer","encoding","isEncoding","actual","fromString","obj","isBuffer","checked","copy","ArrayBuffer","isView","numberIsNaN","fromArrayLike","type","isArray","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","m","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","asciiWrite","blitBuffer","str","byteArray","asciiToBytes","base64Slice","utf8Slice","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","error","defineProperty","get","Symbol","species","configurable","enumerable","writable","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","swap16","swap32","swap64","toLocaleString","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","units","utf16leToBytes","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","targetStart","copyWithin","set","INVALID_BASE64_RE","leadSurrogate","trim","base64clean","src","dst","constructor","name","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","rt","abs","converter","Enum","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","values","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","mtype","fields","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","valuesById","long","low","high","unsigned","toNumber","arrayDefault","hasKs2","_fieldsArray","filter","group","ref","id","keyType","types","basic","packed","rfield","required","wireType","mapKey","genTypePartial","optional","ReflectionObject","create","className","Namespace","comment","comments","reserved","fromJSON","json","enm","toJSONOptions","keepComments","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","Type","ruleRe","rule","extend","isObject","message","defaultValue","Long","extensionField","declaringField","_packed","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","build","load","root","Root","loadSync","encoder","decoder","verifier","OneOf","MapField","Service","Method","Message","wrappers","configure","Reader","BufferReader","Writer","BufferWriter","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","names","methods","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterTypes","parentAlreadyChecked","lookupEnum","lookupService","Service_","Enum_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","oneof","addFieldsToParent","oneofName","oneOfGetter","oneOfSetter","LongBits","indexOutOfRange","writeLength","create_array","readLongVarint","bits","readFixed32_end","readFixed64","_slice","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skip","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","parse","common","deferred","files","SYNC","resolvePath","self","sync","finish","cb","process","imports","weakImports","queued","weak","idx","altname","substring","setTimeout","readFileSync","isNode","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","methodName","lcFirst","isReserved","q","oneofs","extensions","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","bake","o","key","safePropBackslashRe","safePropQuoteRe","ucFirst","toUpperCase","camelCaseRe","camelCase","decorateRoot","decorateEnumIndex","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","newError","CustomError","captureStackTrace","stack","pool","global","window","versions","node","Number","isset","isSet","hasOwnProperty","BufferTemp","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","seenFirstField","invalid","genVerifyKey","genVerifyValue","oneofProp","expected","type_url","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeBytesBuffer","writeStringBuffer","$require","$module","amd","isLong"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\nmodule.exports = inquire;\n\n/**\n * Requires a module only if available.\n * @memberof util\n * @param {string} moduleName Module to require\n * @returns {?Object} Required module if available and not empty, otherwise `null`\n */\n// https://github.com/protobufjs/protobuf.js/pull/1941/files\n// https://github.com/protobufjs/protobuf.js/blob/f42297b29d15c8e0382744a83f5147a1aa978f42/CHANGELOG.md?plain=1#L55\n// changed in 2025-04-15, version 7.5.0\nfunction inquire(moduleName) {\n    try {\n        if (typeof require !== \"function\") {\n            return null;\n        }\n        var mod = require(moduleName);\n        if (mod && (mod.length || Object.keys(mod).length)) return mod;\n        return null;\n    } catch (err) {\n        // ignore\n        return null;\n    }\n}\n\n/*\n// maybe worth a shot to prevent renaming issues:\n// see: https://github.com/webpack/webpack/blob/master/lib/dependencies/CommonJsRequireDependencyParserPlugin.js\n// triggers on:\n// - expression require.cache\n// - expression require (???)\n// - call require\n// - call require:commonjs:item\n// - call require:commonjs:context\n\nObject.defineProperty(Function.prototype, \"__self\", { get: function() { return this; } });\nvar r = require.__self;\ndelete Function.prototype.__self;\n*/\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2),\r\n    inquire   = require(8);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require(12)\nvar ieee754 = require(14)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (ArrayBuffer.isView(buf)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(18),\n    util = require(37);\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(util.Long)\")\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\n                    (\"m%s=d%s\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    } return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n            (\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen\n        (\"if(util.Long){\")\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n        (\"}else\")\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    return gen\n    (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n","\"use strict\";\nmodule.exports = decoder;\n\nvar Enum    = require(18),\n    types   = require(36),\n    util    = require(37);\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    (\"if(!(r instanceof Reader))\")\n        (\"r=Reader.create(r)\")\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\n    (\"while(r.pos<c){\")\n        (\"var t=r.uint32()\");\n    if (mtype.group) gen\n        (\"if((t&7)===4)\")\n            (\"break\");\n    gen\n        (\"switch(t>>>3){\");\n\n    var i = 0;\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            ref   = \"m\" + util.safeProp(field.name); gen\n            (\"case %i:\", field.id);\n\n        // Map fields\n        if (field.map) { gen\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\n                (\"if(%s===util.emptyObject)\", ref)\n                    (\"%s={}\", ref)\n                (\"k=r.%s()\", field.keyType)\n                (\"r.pos++\"); // assumes id 2 + value wireType\n            if (types.long[field.keyType] !== undefined) {\n                if (types.basic[type] === undefined) gen\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\n                else gen\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\n            } else {\n                if (types.basic[type] === undefined) gen\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\n                else gen\n                (\"%s[k]=r.%s()\", ref, type);\n            }\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n\n                (\"if(!(%s&&%s.length))\", ref, ref)\n                    (\"%s=[]\", ref);\n\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen\n                (\"if((t&7)===2){\")\n                    (\"var c2=r.uint32()+r.pos\")\n                    (\"while(r.pos<c2)\")\n                        (\"%s.push(r.%s())\", ref, type)\n                (\"}else\");\n\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\n                    ? \"%s.push(types[%i].decode(r))\"\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen\n                    (\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n                ? \"%s=types[%i].decode(r)\"\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen\n                (\"%s=r.%s()\", ref, type);\n        gen\n                (\"break\");\n    // Unknown fields\n    } gen\n            (\"default:\")\n                (\"r.skipType(t&7)\")\n                (\"break\")\n\n        (\"}\")\n    (\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n\n    return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline */\n}\n","\"use strict\";\nmodule.exports = encoder;\n\nvar Enum     = require(18),\n    types    = require(36),\n    util     = require(37);\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n    return field.resolvedType.group\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    (\"if(!w)\")\n        (\"w=Writer.create()\");\n\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n\n    for (var i = 0; i < fields.length; ++i) {\n        var field    = fields[i].resolve(),\n            index    = mtype._fieldsArray.indexOf(field),\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            wireType = types.basic[type];\n            ref      = \"m\" + util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) {\n            gen\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen\n        (\"}\")\n    (\"}\");\n\n            // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) { gen\n\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n        (\"for(var i=0;i<%s.length;++i)\", ref)\n            (\"w.%s(%s[i])\", type, ref)\n        (\"w.ldelim()\");\n\n            // Non-packed\n            } else { gen\n\n        (\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined)\n            genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n            } gen\n    (\"}\");\n\n        // Non-repeated\n        } else {\n            if (field.optional) gen\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\n\n            if (wireType === undefined)\n        genTypePartial(gen, field, index, ref);\n            else gen\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n        }\n    }\n\n    return gen\n    (\"return w\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}","\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(26);\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(25),\n    util = require(37);\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"  , keepComments ? this.comment : undefined,\n        \"comments\" , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n","\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(26);\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(18),\n    types = require(36),\n    util  = require(37);\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","\"use strict\";\nvar protobuf = module.exports = require(21);\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(17);\nprotobuf.decoder          = require(16);\nprotobuf.verifier         = require(40);\nprotobuf.converter        = require(15);\n\n// Reflection\nprotobuf.ReflectionObject = require(26);\nprotobuf.Namespace        = require(25);\nprotobuf.Root             = require(30);\nprotobuf.Enum             = require(18);\nprotobuf.Type             = require(35);\nprotobuf.Field            = require(19);\nprotobuf.OneOf            = require(27);\nprotobuf.MapField         = require(22);\nprotobuf.Service          = require(34);\nprotobuf.Method           = require(24);\n\n// Runtime\nprotobuf.Message          = require(23);\nprotobuf.wrappers         = require(41);\n\n// Utility\nprotobuf.types            = require(36);\nprotobuf.util             = require(37);\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(42);\nprotobuf.BufferWriter = require(43);\nprotobuf.Reader       = require(28);\nprotobuf.BufferReader = require(29);\n\n// Utility\nprotobuf.util         = require(39);\nprotobuf.rpc          = require(32);\nprotobuf.roots        = require(31);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Set up buffer utility according to the environment\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n","\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(19);\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(36),\n    util    = require(37);\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","\"use strict\";\nmodule.exports = Message;\n\nvar util = require(39);\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/","\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(26);\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(37);\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n","\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(26);\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = require(19),\n    util     = require(37);\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n","\"use strict\";\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(37);\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n","\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(26);\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(19),\n    util  = require(37);\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(39);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(28);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(39);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n","\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(25);\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(19),\n    Enum    = require(18),\n    OneOf   = require(27),\n    util    = require(37);\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Strip path if this file references a bundled definition\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common)\n                filename = altname;\n        }\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            util.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(33);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(39);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(25);\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(24),\n    util   = require(37),\n    rpc    = require(32);\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n","\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(25);\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(18),\n    OneOf     = require(27),\n    Field     = require(19),\n    MapField  = require(22),\n    Service   = require(34),\n    Message   = require(23),\n    Reader    = require(28),\n    Writer    = require(42),\n    util      = require(37),\n    encoder   = require(17),\n    decoder   = require(16),\n    verifier  = require(40),\n    converter = require(15),\n    wrappers  = require(41);\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n","\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(37);\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(39);\n\nvar roots = require(31);\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = require(4);\nutil.fetch   = require(6);\nutil.path    = require(9);\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = require(35);\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = require(18);\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(30))());\n    }\n});\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(39);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(2);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(3);\n\n// base class of rpc.Service\nutil.EventEmitter = require(5);\n\n// float handling accross browsers\nutil.float = require(7);\n\n// requires modules optionally and hides the call from bundlers\n// util.inquire = require(\"@protobufjs/inquire\");\nutil.inquire = require(1);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(11);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(10);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(38);\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n// 纯粹为了解决问题做的\nutil.BufferTemp = require(13).Buffer;\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        // util._Buffer_from = util._Buffer_allocUnsafe = null;\n        util._Buffer_from = null;\n        util._Buffer_allocUnsafe = function Buffer_allocUnsafe(size) {\n            return new util.BufferTemp(size);\n        };\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(18),\n    util      = require(37);\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}","\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(23);\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n            var type = this.lookup(object[\"@type\"]);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                return this.create({\n                    type_url: \"/\" + type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            object[\"@type\"] = message.$type.fullName;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(39);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(42);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(39);\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n"],"sourceRoot":"."}